// ./DailyManna/ViewModels/QuoteReminderViewModel.swift

import SwiftUI
import UserNotifications

class QuoteReminderViewModel: ObservableObject {
   @Published var selectedCategory: SubCategory?
   @Published var selectedDays: Set<Int> = []
   @Published var selectedTime: Date = Date()
   @Published var selectedSound: NotificationSound = .systemDefault
   @Published var currentQuote: Quote?
   @Published var isReminderSet: Bool = false
   @Published var isFavorite: Bool = false
   @Published var quotes: [Quote] = []
    private let lastQuoteIndexKey = "lastQuoteIndex"
   
   private var autoPlayTimer: Timer?
   
    @Published var settings: QuoteSettings {
        didSet {
            saveSettings()
        }
    }
    
    private let settingsKey = "quoteSettings"
    
    init() {
        // Load saved settings or use defaults
        if let data = UserDefaults.standard.data(forKey: settingsKey),
           let loadedSettings = try? JSONDecoder().decode(QuoteSettings.self, from: data) {
            self.settings = loadedSettings
        } else {
            self.settings = QuoteSettings()
        }
    }
    
    func saveSettings() {
        if let encoded = try? JSONEncoder().encode(settings) {
            UserDefaults.standard.set(encoded, forKey: settingsKey)
        }
    }
    
    // UserDefaults에 저장할 키
    private let isFirstLaunchKey = "isFirstLaunch"
    private let categoryKey = "selectedCategory"
    private let lastQuoteKey = "lastQuote"
    
    // 사용자 선택 저장
    var isFirstLaunch: Bool {
        get {
            !UserDefaults.standard.bool(forKey: isFirstLaunchKey)
        }
        set {
            UserDefaults.standard.set(!newValue, forKey: isFirstLaunchKey)
        }
    }
    
    func saveUserPreferences() {
        if let category = selectedCategory {
            let encoder = JSONEncoder()
            if let encoded = try? encoder.encode(category) {
                UserDefaults.standard.set(encoded, forKey: categoryKey)
            }
        }
        
        // 현재 말씀의 인덱스 저장
        if let currentQuote = currentQuote,
           let currentIndex = quotes.firstIndex(where: { $0.id == currentQuote.id }) {
            UserDefaults.standard.set(currentIndex, forKey: lastQuoteIndexKey)
        }
        
        isFirstLaunch = false
    }
    
    func loadSavedCategory() async -> Bool {
        // Load saved category
        if let savedCategory = UserDefaults.standard.data(forKey: categoryKey) {
            let decoder = JSONDecoder()
            if let loadedCategory = try? decoder.decode(SubCategory.self, from: savedCategory) {
                await MainActor.run {
                    self.selectedCategory = loadedCategory
                }
                
                // Load quotes for the saved category
                await loadQuotesForCategory(loadedCategory)
                return true
            }
        }
        return false
    }
    
    func loadQuotesForCategory(_ category: SubCategory) async {
        do {
            let newQuotes = try await APIClient.fetchVerses(forCategory: category)
            await MainActor.run {
                self.quotes = newQuotes
                
                // Restore last viewed quote index
                if let savedIndex = UserDefaults.standard.object(forKey: lastQuoteIndexKey) as? Int,
                   savedIndex < newQuotes.count {
                    self.currentQuote = newQuotes[savedIndex]
                } else {
                    self.currentQuote = newQuotes.first
                }
            }
        } catch {
            print("Error loading quotes: \(error)")
        }
    }
    // 저장된 선택 불러오기
    private func loadUserPreferences() {
        // 카테고리 불러오기
        if let savedCategory = UserDefaults.standard.data(forKey: categoryKey) {
            let decoder = JSONDecoder()
            if let loadedCategory = try? decoder.decode(SubCategory.self, from: savedCategory) {
                selectedCategory = loadedCategory
                
                // 해당 카테고리의 말씀들 불러오기
                Task {
                    await loadQuotesForCategory(loadedCategory)
                }
            }
        }
        
        // 마지막 말씀 불러오기
        if let savedQuote = UserDefaults.standard.data(forKey: lastQuoteKey) {
            let decoder = JSONDecoder()
            if let loadedQuote = try? decoder.decode(Quote.self, from: savedQuote) {
                currentQuote = loadedQuote
            }
        }
    }
   
   func requestNotificationPermission() {
       UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { success, error in
           if let error = error {
               print("Error: \(error.localizedDescription)")
           }
       }
   }
   
   func scheduleReminders() {
       UNUserNotificationCenter.current().removeAllPendingNotificationRequests()
       
       for day in selectedDays {
           let notification = UNMutableNotificationContent()
           notification.title = "Daily Bible Quote"
           
           if let quote = quotes.randomElement() {
               notification.body = quote.text
           }
           
           notification.sound = UNNotificationSound(named: selectedSound.soundName)
           
           var dateComponents = Calendar.current.dateComponents([.hour, .minute], from: selectedTime)
           dateComponents.weekday = day + 1
           
           let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: true)
           let request = UNNotificationRequest(identifier: UUID().uuidString, content: notification, trigger: trigger)
           
           UNUserNotificationCenter.current().add(request)
       }
       
       isReminderSet = true
   }
   
   func toggleFavorite() {
       isFavorite.toggle()
   }
   
   func startAutoPlay() {
       autoPlayTimer = Timer.scheduledTimer(withTimeInterval: 5.0, repeats: true) { [weak self] _ in
           self?.showNextQuote()
       }
   }
   
   func stopAutoPlay() {
       autoPlayTimer?.invalidate()
       autoPlayTimer = nil
   }
   
    func showNextQuote() {
        guard let currentQuote = currentQuote,
              let currentIndex = quotes.firstIndex(where: { $0.id == currentQuote.id }) else { return }
        
        let nextIndex = (currentIndex + 1) % quotes.count
        self.currentQuote = quotes[nextIndex]
        saveUserPreferences()  // 인덱스 저장
    }

    func showPreviousQuote() {
        guard let currentQuote = currentQuote,
              let currentIndex = quotes.firstIndex(where: { $0.id == currentQuote.id }) else { return }
        
        let previousIndex = (currentIndex - 1 + quotes.count) % quotes.count
        self.currentQuote = quotes[previousIndex]
        saveUserPreferences()  // 인덱스 저장
    }
}


// ./DailyManna/App/DailyMannaApp.swift


import SwiftUI

@main
struct DailyManna: App {
    var body: some Scene {
        WindowGroup {
            SplashView()
        }
    }
}


// ./DailyManna/Models/APIClient.swift

import Foundation

struct APIClient {
    static let baseURL = "https://aistockadvisor.net"
    
    static func fetchVerses(forCategory category: SubCategory) async throws -> [Quote] {
        let url = URL(string: "\(baseURL)/api/categories/\(category.name.lowercased())/verses")!
        let (data, _) = try await URLSession.shared.data(from: url)
        let response = try JSONDecoder().decode(VersesResponse.self, from: data)
        return response.verses
    }
 }

 struct VersesResponse: Codable {
    let verses: [Quote]
 }


// ./DailyManna/Models/Quote.swift

import SwiftUI

struct Quote: Identifiable, Codable {
    let id: String  // UUID에서 String으로 변경
    let text: String
    let reference: String
    let category: String
    
    enum CodingKeys: String, CodingKey {
        case id, text, reference, category
    }
}



// ./DailyManna/Models/NotificationSound.swift

import UserNotifications
import AVFoundation

enum NotificationSound: String, CaseIterable {
    case coco = "Coco"
    case drums = "Drums"
    case coin = "Coin"
    case sheba = "Sheba"
    case galaxy = "Galaxy"
    case domino = "Domino"
    case correct = "Correct"
    case gucci = "Gucci"
    case magicWand = "Magic wand"
    case noSound = "No sound"
    case positive = "Positive"
    case systemDefault = "System default"
    case piper = "Piper"
    
    var soundName: UNNotificationSoundName {
        if self == .noSound {
            return UNNotificationSoundName("")
        } else if self == .systemDefault {
            return UNNotificationSoundName("DefaultSound")
        } else {
            return UNNotificationSoundName(rawValue: "\(self.rawValue).caf")
        }
    }
    
    var soundFileName: String {
        if self == .noSound {
            return ""
        } else if self == .systemDefault {
            return "DefaultSound"
        } else {
            return self.rawValue
        }
    }
    
    static func playSound(_ sound: NotificationSound) {
        guard sound != .noSound else { return }
        
        var soundID: SystemSoundID = 0
        if let soundURL = Bundle.main.url(forResource: sound.soundFileName, withExtension: "caf") {
            AudioServicesCreateSystemSoundID(soundURL as CFURL, &soundID)
            AudioServicesPlaySystemSound(soundID)
        }
    }
}


// ./DailyManna/Views/DaySelectionView.swift

import SwiftUI

struct DaySelectionView: View {
    @Binding var selectedDays: Set<Int>
    private let days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    
    var body: some View {
        HStack {
            ForEach(0..<7) { index in
                DayButton(
                    day: days[index],
                    isSelected: selectedDays.contains(index)
                ) {
                    if selectedDays.contains(index) {
                        selectedDays.remove(index)
                    } else {
                        selectedDays.insert(index)
                    }
                }
            }
        }
    }
}


// ./DailyManna/Views/QuoteSettingsSheet.swift


import SwiftUI

struct QuoteSettingsSheet: View {
    @Environment(\.dismiss) var dismiss
    @ObservedObject var viewModel: QuoteReminderViewModel
    @State private var isPremiumLocked = false
    
    var body: some View {
        NavigationView {
            List {
                // 텍스트 크기 조절
                Section(header: Text("Text Size")) {
                    VStack(alignment: .leading) {
                        Text("Bible Verse")
                        Slider(
                            value: $viewModel.settings.textSize,
                            in: 20...40,
                            step: 1
                        ) {
                            Text("Text Size")
                        } minimumValueLabel: {
                            Text("A").font(.system(size: 14))
                        } maximumValueLabel: {
                            Text("A").font(.system(size: 20))
                        }
                        
                        Text("Reference")
                        Slider(
                            value: $viewModel.settings.referenceSize,
                            in: 16...32,
                            step: 1
                        ) {
                            Text("Reference Size")
                        } minimumValueLabel: {
                            Text("A").font(.system(size: 12))
                        } maximumValueLabel: {
                            Text("A").font(.system(size: 18))
                        }
                    }
                }
                
                // 자동 재생 설정
                Section(header: Text("Auto Play")) {
                    Picker("Interval", selection: $viewModel.settings.autoPlayInterval) {
                        Text("8 seconds").tag(8.0)
                        Text("12 seconds").tag(12.0)
                        Text("16 seconds").tag(16.0)
                    }
                }
                
                // 햅틱 피드백
                Section {
                    Toggle("Haptic Feedback", isOn: $viewModel.settings.hapticEnabled)
                }
                
                // 테마 선택
                Section(header: Text("Theme")) {
                    ForEach(QuoteTheme.allCases, id: \.self) { theme in
                        HStack {
                            Circle()
                                .fill(theme.color)
                                .frame(width: 20, height: 20)
                            
                            Text(theme.rawValue)
                            
                            if theme != .classic && theme != .midnight {
                                Spacer()
                                Image(systemName: "crown.fill")
                                    .foregroundColor(.yellow)
                            }
                        }
                        .contentShape(Rectangle())
                        .onTapGesture {
                            if theme == .classic || theme == .midnight {
                                viewModel.settings.theme = theme
                            } else {
                                isPremiumLocked = true
                            }
                        }
                    }
                }
            }
            .navigationTitle("Settings")
            .navigationBarItems(trailing: Button("Done") {
                viewModel.saveSettings()
                dismiss()
            })
            .alert("Premium Feature", isPresented: $isPremiumLocked) {
                Button("Get Premium") {
                    // Premium 구매 로직
                }
                Button("Cancel", role: .cancel) {}
            } message: {
                Text("Unlock all themes with Premium!")
            }
        }
    }
}

// QuoteTheme extension for colors
extension QuoteTheme {
    var color: Color {
        switch self {
        case .classic: return .black
        case .midnight: return Color(red: 0.1, green: 0.1, blue: 0.2)
        case .ocean: return Color(red: 0, green: 0.3, blue: 0.6)
        case .forest: return Color(red: 0.1, green: 0.3, blue: 0.1)
        case .sunset: return Color(red: 0.6, green: 0.2, blue: 0.3)
        }
    }
}


// ./DailyManna/Views/TimePickerView.swift

import SwiftUI

struct TimePickerView: View {
    @Binding var selectedTime: Date
    @Environment(\.dismiss) var dismiss
    @Environment(\.colorScheme) var colorScheme
    @State private var tempSelectedTime: Date
    
    init(selectedTime: Binding<Date>) {
        _selectedTime = selectedTime
        _tempSelectedTime = State(initialValue: selectedTime.wrappedValue)
    }
    
    var body: some View {
        VStack(spacing: 0) {
            // Time Picker
            DatePicker("", selection: $tempSelectedTime, displayedComponents: .hourAndMinute)
                .datePickerStyle(WheelDatePickerStyle())
                .labelsHidden()
                .frame(maxWidth: 250, maxHeight: 160)
                .padding(.top, 16)
            
            Spacer()
                .frame(height: 60)  // 시계와 버튼 사이 간격 증가
            
            // Done Button
            Button(action: {
                selectedTime = tempSelectedTime
                dismiss()
            }) {
                Text("Done")
                    .font(.headline)
                    .foregroundColor(.white)
                    .frame(width: 300)
                    .padding(.vertical, 12)
                    .background(
                        RoundedRectangle(cornerRadius: 8)
                            .fill(Color.orange)
                    )
            }
            .padding(.bottom, 16)
        }
        .padding(.horizontal, 20)
        .background(colorScheme == .dark ? Color(.systemGray6) : .white)
        .cornerRadius(12)
    }
}



// ./DailyManna/Views/QuoteView.swift


import  SwiftUI

struct QuoteView: View {
   @ObservedObject var viewModel: QuoteReminderViewModel
   @State private var showCategorySheet = false
   @State private var isPlaying = false
   @State private var showUpgradeAlert = false
   @State private var offset: CGFloat = 0
   @State private var opacity: Double = 1.0
   @State private var scale: CGFloat = 1.0  // 추가
   @Environment(\.colorScheme) var colorScheme
   @State private var progress: Double = 0
   @State private var timer: Timer?
   private let autoPlayDuration: Double = 12.0
  @State private var showSettings = false
    @State private var showThemeSheet = false
    @State private var settingsPosition: CGPoint = .zero
   
    var categoryButton: some View {
        Button(action: {
            showCategorySheet = true
        }) {
            if let category = viewModel.selectedCategory {
                HStack(spacing: 8) {
                    Text(category.icon)
                        .font(.system(size: 20))
                    Text(category.name)
                        .font(.system(size: 18, weight: .medium))
                }
                .padding(.horizontal, 16)
                .padding(.vertical, 8)
                .background(
                    Capsule()
                        .fill(Color(.systemGray5))
                )
            }
        }
        .foregroundColor(.white)
    }
   
    var body: some View {
        ZStack {
            VStack(spacing: 0) {
                // Top Navigation Bar
                HStack {
                    categoryButton
                    Spacer()
                    Button(action: {
                        showUpgradeAlert = true
                    }) {
                        Image(systemName: "crown.fill")
                            .font(.system(size: 24))
                            .foregroundColor(.yellow)
                            .opacity(0.8)
                    }
                }
                .padding(.horizontal, 20)
                .padding(.top, 20)
                
                // Quote Content
                GeometryReader { geometry in
                    VStack(spacing: 0) {
                        Spacer()
                        Text(viewModel.currentQuote?.text ?? "")
                            .font(.system(size: viewModel.settings.textSize, weight: .regular))
                            .multilineTextAlignment(.center)
                            .padding(.horizontal, 32)
                            .minimumScaleFactor(0.5)
                            .fixedSize(horizontal: false, vertical: true)
                            .foregroundColor(.white)
                        
                        Text(viewModel.currentQuote?.reference ?? "")
                            .font(.system(size: viewModel.settings.referenceSize, weight: .regular))
                            .foregroundColor(.gray)
                            .padding(.top, 24)
                        Spacer()
                    }
                    .frame(width: geometry.size.width, height: geometry.size.height)
                    .offset(y: offset)
                    .scaleEffect(scale)
                    .opacity(opacity)
                    // 말씀 내용을 더 위로 이동
                    .offset(y: showSettings ? -200 : 0)  // -120에서 -200으로 수정
                    .animation(.spring(), value: showSettings)
                }
                .contentShape(Rectangle())
                .gesture(
                    DragGesture()
                        .onChanged { gesture in
                            let translation = gesture.translation.height
                            if translation < 0 {
                                offset = translation
                                scale = 1.0
                                opacity = 1.0 - (abs(translation) / 500.0)
                            }
                        }
                        .onEnded { gesture in
                            let translation = gesture.translation.height
                            let generator = UIImpactFeedbackGenerator(style: .medium)
                            
                            if translation < -50 {
                                if viewModel.settings.hapticEnabled {
                                    generator.impactOccurred()
                                }
                                withAnimation(.easeOut(duration: 0.3)) {
                                    offset = -200
                                    opacity = 0
                                }
                                
                                DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
                                    viewModel.showNextQuote()
                                    scale = 0.5
                                    opacity = 0
                                    offset = 0
                                    
                                    withAnimation(.spring(response: 1.0, dampingFraction: 0.9, blendDuration: 0.5)) {
                                        scale = 1.0
                                        opacity = 1
                                    }
                                }
                            } else {
                                withAnimation(.spring()) {
                                    offset = 0
                                    scale = 1.0
                                    opacity = 1
                                }
                            }
                        }
                )
                
                // Bottom Control Bar
                HStack(spacing: 60) {
                    Button(action: toggleFavorite) {
                        Image(systemName: viewModel.isFavorite ? "heart.fill" : "heart")
                            .font(.system(size: 24))
                            .foregroundColor(.white)
                    }
                    
                    Button(action: shareQuote) {
                        Image(systemName: "square.and.arrow.up")
                            .font(.system(size: 24))
                            .foregroundColor(.white)
                    }
                    
                    Button(action: toggleAutoPlay) {
                        Image(systemName: isPlaying ? "pause.fill" : "play.fill")
                            .font(.system(size: 24))
                            .foregroundColor(.white)
                    }
                    
                    Button(action: {
                        withAnimation {
                            showSettings.toggle()
                        }
                    }) {
                        Image(systemName: "ellipsis")
                            .font(.system(size: 24))
                            .foregroundColor(.white)
                    }
                }
                .padding(.bottom, 40)
                .padding(.top, 20)
            }
            
            // Settings Popup
            if showSettings {
                Color.black.opacity(0.3)
                    .ignoresSafeArea()
                    .onTapGesture {
                        withAnimation {
                            showSettings = false
                        }
                    }
                
                VStack {
                    Spacer()
                    QuoteSettingsPopup(viewModel: viewModel, showThemeSheet: $showThemeSheet)
                        .frame(maxWidth: .infinity)
                        .padding(.horizontal)
                        .padding(.bottom, 40)
                }
                .transition(.move(edge: .bottom))
                .zIndex(1)
            }
        }
        .background(viewModel.settings.theme.color.ignoresSafeArea())
        .preferredColorScheme(.dark)
        .sheet(isPresented: $showCategorySheet) {
            CategorySheetView(selectedCategory: $viewModel.selectedCategory, viewModel: viewModel)
        }
        .sheet(isPresented: $showThemeSheet) {
            ThemeSelectionSheet(viewModel: viewModel)
        }
        .alert(isPresented: $showUpgradeAlert) {
            Alert(
                title: Text("Upgrade to Premium"),
                message: Text("Get access to all features and unlimited quotes!"),
                primaryButton: .default(Text("Upgrade Now")),
                secondaryButton: .cancel()
            )
        }
        .onTapGesture {
            if showSettings {
                withAnimation {
                    showSettings = false
                }
            }
        }
    }
    
    // CircularProgressButton 구현
    private var playButton: some View {
        ZStack {
            // 프로그레스 배경
            Circle()
                .stroke(lineWidth: 2)
                .opacity(0.3)
                .foregroundColor(.white)
            
            // 프로그레스 인디케이터
            Circle()
                .trim(from: 0, to: progress)
                .stroke(style: StrokeStyle(lineWidth: 2, lineCap: .round, lineJoin: .round))
                .foregroundColor(.white)
                .rotationEffect(Angle(degrees: -90))
            
            // 재생/일시정지 아이콘
            Image(systemName: isPlaying ? "pause.fill" : "play.fill")
                .font(.system(size: 24))
                .foregroundColor(.white)
        }
        .frame(width: 32, height: 32)
    }
    
    private func toggleAutoPlay() {
        isPlaying.toggle()
        if isPlaying {
            // 타이머 시작
            progress = 0
            timer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true) { _ in
                if progress < 1.0 {
                    withAnimation {
                        progress += 0.1 / autoPlayDuration
                    }
                } else {
                    // 다음 구절로 넘어가기
                    withAnimation(.easeOut(duration: 0.3)) {
                        offset = -200
                        opacity = 0
                    }
                    
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
                        viewModel.showNextQuote()
                        scale = 0.5
                        opacity = 0
                        offset = 0
                        progress = 0  // 프로그레스 리셋
                        
                        withAnimation(.spring(response: 1.0, dampingFraction: 0.9, blendDuration: 0.5)) {
                            scale = 1.0
                            opacity = 1
                        }
                    }
                }
            }
        } else {
            // 타이머 정지
            timer?.invalidate()
            timer = nil
            withAnimation {
                progress = 0
            }
        }
    }
   
   private func shareQuote() {
       guard let quote = viewModel.currentQuote else { return }
       let shareText = "\(quote.text)\n- \(quote.reference)"
       let av = UIActivityViewController(activityItems: [shareText], applicationActivities: nil)
       if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
          let window = windowScene.windows.first {
           window.rootViewController?.present(av, animated: true)
       }
   }
   
   private func toggleFavorite() {
       viewModel.toggleFavorite()
   }
}


// ./DailyManna/Views/ReminderSetupView.swift

import SwiftUI

struct ReminderSetupView: View {
    @ObservedObject var viewModel: QuoteReminderViewModel
    @State private var showCategorySheet = false
    @State private var showTimePicker = false
    @State private var showSoundPicker = false
    @State private var showQuoteView = false  // QuoteView 전환을 위한 상태 추가
    @State private var timePickerAnchor: CGPoint = .zero
    @State private var soundPickerAnchor: CGPoint = .zero
    @Environment(\.colorScheme) var colorScheme
    
    var backgroundColor: Color {
        Color(.systemGray6)  // 항상 다크모드 색상 사용
    }
    
    var buttonBackgroundColor: Color {
        colorScheme == .dark ? Color(.systemGray5) : Color(.systemGray6)
    }
    
    var timeString: String {
        let formatter = DateFormatter()
        formatter.dateFormat = "h:mm a"
        return formatter.string(from: viewModel.selectedTime)
    }
    
    var selectedCategoryString: String {
        if let category = viewModel.selectedCategory {
            return "\(category.icon) \(category.name)"
        }
        return "Select"
    }
    
    // Save 버튼이 활성화될 조건
    private var isSaveEnabled: Bool {
        viewModel.selectedCategory != nil
    }
    
    var body: some View {
        ScrollView {
            VStack(spacing: 24) {
                // 상단 아이콘 및 제목
                HStack(spacing: 8) {
                    Image(systemName: "bell.fill")
                        .font(.system(size: 28))
                        .foregroundColor(.orange)
                    
                    Text("Daily Manna")
                        .font(.system(size: 28, weight: .bold))
                        .foregroundColor(colorScheme == .dark ? .white : .black)
                }
                .padding(.top, 20)
                .padding(.bottom, 20)
                
                VStack(spacing: 20) {
                    // 카테고리 섹션
                    VStack(alignment: .leading, spacing: 12) {
                        HStack {
                            Text("Categories")
                                .font(.headline)
                                .foregroundColor(colorScheme == .dark ? .white : .black)
                            
                            Spacer()
                            
                            Button(action: {
                                showCategorySheet = true
                            }) {
                                Text(selectedCategoryString)
                                    .font(.headline)
                                    .padding(.horizontal, 16)
                                    .padding(.vertical, 8)
                                    .background(
                                        RoundedRectangle(cornerRadius: 8)
                                            .fill(buttonBackgroundColor)
                                    )
                                    .foregroundColor(colorScheme == .dark ? .white : .black)
                            }
                        }
                    }
                    .padding(.horizontal)
                    
                    // Sound 섹션
                    VStack(alignment: .leading, spacing: 12) {
                        HStack {
                            Text("Sound")
                                .font(.headline)
                                .foregroundColor(colorScheme == .dark ? .white : .black)
                            
                            Spacer()
                            
                            Button(action: {
                                showSoundPicker = true
                            }) {
                                Text(viewModel.selectedSound.rawValue)
                                    .font(.headline)
                                    .padding(.horizontal, 16)
                                    .padding(.vertical, 8)
                                    .background(
                                        RoundedRectangle(cornerRadius: 8)
                                            .fill(buttonBackgroundColor)
                                    )
                                    .foregroundColor(colorScheme == .dark ? .white : .black)
                            }
                        }
                    }
                    .padding(.horizontal)
                    
                    // 시간 선택 섹션
                    VStack(alignment: .leading, spacing: 12) {
                        HStack {
                            Text("Time")
                                .font(.headline)
                                .foregroundColor(colorScheme == .dark ? .white : .black)
                            
                            Spacer()
                            
                            Button(action: {
                                showTimePicker = true
                            }) {
                                Text(timeString)
                                    .font(.headline)
                                    .padding(.horizontal, 16)
                                    .padding(.vertical, 8)
                                    .background(
                                        RoundedRectangle(cornerRadius: 8)
                                            .fill(buttonBackgroundColor)
                                    )
                                    .foregroundColor(colorScheme == .dark ? .white : .black)
                            }
                        }
                    }
                    .padding(.horizontal)
                    
                    // 요일 선택 섹션
                    VStack(alignment: .leading, spacing: 12) {
                        HStack(spacing: 8) {
                            ForEach(0..<7) { index in
                                DayButton(
                                    day: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][index],
                                    isSelected: viewModel.selectedDays.contains(index)
                                ) {
                                    if viewModel.selectedDays.contains(index) {
                                        viewModel.selectedDays.remove(index)
                                    } else {
                                        viewModel.selectedDays.insert(index)
                                    }
                                }
                            }
                        }
                    }
                    .padding(.horizontal)
                }
                
                Spacer()
                
                // 저장 버튼
                Button(action: {
                    viewModel.scheduleReminders()
                    // 선택된 카테고리와 현재 말씀 저장
                    viewModel.saveUserPreferences()
                    showQuoteView = true
                }) {
                    Text("Save")
                        .font(.headline)
                        .foregroundColor(.white)
                        .frame(maxWidth: .infinity)
                        .padding(.vertical, 16)
                        .background(
                            RoundedRectangle(cornerRadius: 12)
                                .fill(isSaveEnabled ? Color.orange : Color.gray)
                        )
                }
                .disabled(!isSaveEnabled)
                .padding(.horizontal)
                .padding(.bottom, 20)
            }
        }
        .background(Color(.systemGray6).ignoresSafeArea())
        .preferredColorScheme(.dark) // 강제로 다크모드 적용
        .sheet(isPresented: $showCategorySheet) {
            CategorySheetView(selectedCategory: $viewModel.selectedCategory, viewModel: viewModel)
        }
        .popover(isPresented: $showTimePicker, attachmentAnchor: .point(.bottom), arrowEdge: .bottom) {
            TimePickerView(selectedTime: $viewModel.selectedTime)
        }
        .popover(isPresented: $showSoundPicker, attachmentAnchor: .point(.bottom), arrowEdge: .bottom) {
            SoundPickerView(selectedSound: $viewModel.selectedSound)
        }
        .fullScreenCover(isPresented: $showQuoteView) {
            QuoteView(viewModel: viewModel)
        }
    }
}

struct TimeAnchorPreferenceKey: PreferenceKey {
    static var defaultValue: CGPoint = .zero
    static func reduce(value: inout CGPoint, nextValue: () -> CGPoint) {
        value = nextValue()
    }
}

struct SoundAnchorPreferenceKey: PreferenceKey {
    static var defaultValue: CGPoint = .zero
    static func reduce(value: inout CGPoint, nextValue: () -> CGPoint) {
        value = nextValue()
    }
}


// ./DailyManna/Views/SoundPickerView.swift

import SwiftUI

struct SoundPickerView: View {
    @Binding var selectedSound: NotificationSound
    @Environment(\.dismiss) var dismiss
    @Environment(\.colorScheme) var colorScheme
    
    var body: some View {
        NavigationView {
            VStack(alignment: .leading, spacing: 16) {
                Text("Choose a sound for notifications")
                    .font(.title2)
                    .foregroundColor(.secondary)
                    .padding(.horizontal)
                    .padding(.top, 8)
                
                ScrollView {
                    VStack(spacing: 0) {
                        ForEach(NotificationSound.allCases, id: \.self) { sound in
                            Button(action: {
                                selectedSound = sound
                                NotificationSound.playSound(sound)
                            }) {
                                HStack {
                                    // Sound icon
                                    Image(systemName: sound == .noSound ? "speaker.slash" : "speaker.wave.2")
                                        .foregroundColor(.orange)
                                        .frame(width: 30)
                                    
                                    // Sound name
                                    Text(sound.rawValue)
                                        .foregroundColor(colorScheme == .dark ? .white : .black)
                                    
                                    Spacer()
                                    
                                    // Checkmark for selected sound
                                    if sound == selectedSound {
                                        Image(systemName: "checkmark.circle.fill")
                                            .foregroundColor(.orange)
                                    } else {
                                        Circle()
                                            .strokeBorder(Color.gray.opacity(0.3), lineWidth: 1)
                                            .frame(width: 22, height: 22)
                                    }
                                }
                                .contentShape(Rectangle())
                            }
                            .padding(.vertical, 12)
                            .padding(.horizontal)
                            .background(
                                Rectangle()
                                    .fill(colorScheme == .dark ? Color(.systemGray6) : .white)
                            )
                            
                            if sound != NotificationSound.allCases.last {
                                Divider()
                                    .padding(.leading, 56)
                            }
                        }
                    }
                    .background(colorScheme == .dark ? Color(.systemGray6) : .white)
                    .cornerRadius(10)
                    .padding(.horizontal)
                }
                
                Button(action: {
                    dismiss()
                }) {
                    Text("Done")
                        .font(.headline)
                        .foregroundColor(.white)
                        .frame(maxWidth: .infinity)
                        .padding(.vertical, 16)
                        .background(
                            RoundedRectangle(cornerRadius: 12)
                                .fill(Color.orange)
                        )
                }
                .padding()
            }
            .navigationTitle("Sound")
            .navigationBarTitleDisplayMode(.inline)
            .background(colorScheme == .dark ? Color.black : Color(.systemGray6))
        }
    }
}


// ./DailyManna/Views/SplashView.swift

import SwiftUI

struct SplashView: View {
    @State private var isActive = false
    @State private var size = 0.8
    @State private var opacity = 0.5
    
    var body: some View {
        if isActive {
            ContentView()
        } else {
            ZStack {
                Color(.systemGray6).edgesIgnoringSafeArea(.all)  // 다크모드 배경색
                
                VStack {
                    VStack(spacing: 20) {
                        // 메인 이미지
                        Image(systemName: "sun.max.fill")
                            .font(.system(size: 80))
                            .foregroundColor(.orange)
                        
                        Text("DailyManna")
                            .font(.system(size: 36, weight: .bold))
                            .foregroundColor(.white)  // 텍스트 색상 변경
                        
                        Text("Daily bread for your soul")
                            .font(.title3)
                            .foregroundColor(.gray)  // 설명 텍스트 색상 변경
                    }
                    .scaleEffect(size)
                    .opacity(opacity)
                    .onAppear {
                        withAnimation(.easeIn(duration: 1.2)) {
                            self.size = 0.9
                            self.opacity = 1.0
                        }
                    }
                    
                    // 성경 구절
                    VStack {
                        Text("\"Give us this day our daily bread\"")
                            .font(.system(size: 16, weight: .medium))
                            .italic()
                            .foregroundColor(.gray)  // 인용구 색상 변경
                        Text("Matthew 6:11")
                            .font(.system(size: 14, weight: .medium))
                            .foregroundColor(.gray)  // 참조 색상 변경
                    }
                    .padding(.top, 50)
                    .opacity(opacity)
                }
            }
            .preferredColorScheme(.dark)  // 강제 다크모드 설정
            .onAppear {
                DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
                    withAnimation {
                        self.isActive = true
                    }
                }
            }
        }
    }
}


// ./DailyManna/Views/QuoteSettingsPopup.swift

import SwiftUI

struct QuoteSettingsPopup: View {
    @ObservedObject var viewModel: QuoteReminderViewModel
    @Binding var showThemeSheet: Bool
    @State private var expandedSection: SettingSection?
    
    enum SettingSection {
        case textSize, autoPlay, haptic
    }
    
    var body: some View {
        VStack(spacing: 12) {
            ForEach([
                ("Text Size", SettingSection.textSize),
                ("Auto Play", SettingSection.autoPlay),
                ("Haptic", SettingSection.haptic),
                ("Theme", nil)
            ], id: \.0) { title, section in
                if let section = section {
                    // 확장 가능한 섹션
                    VStack(spacing: 0) {
                        Button(action: {
                            withAnimation {
                                expandedSection = expandedSection == section ? nil : section
                            }
                        }) {
                            HStack {
                                Text(title)
                                    .foregroundColor(.white)
                                Spacer()
                                Image(systemName: "chevron.right")
                                    .foregroundColor(.gray)
                                    .rotationEffect(.degrees(expandedSection == section ? 90 : 0))
                            }
                            .padding()
                            .background(Color(.systemGray6))
                            .cornerRadius(12)
                        }
                        
                        if expandedSection == section {
                            sectionContent(for: section)
                                .padding(.horizontal)
                                .padding(.vertical, 8)
                                .background(Color(.systemGray5))
                                .cornerRadius(12)
                                .transition(.scale)
                        }
                    }
                } else {
                    // Theme 버튼
                    Button(action: {
                        showThemeSheet = true
                    }) {
                        HStack {
                            Text(title)
                                .foregroundColor(.white)
                            Spacer()
                            Image(systemName: "chevron.right")
                                .foregroundColor(.gray)
                        }
                        .padding()
                        .background(Color(.systemGray6))
                        .cornerRadius(12)
                    }
                }
            }
        }
        .padding()
        .background(Color(.systemGray5))
        .cornerRadius(20)
        .shadow(radius: 10)
    }
    
    @ViewBuilder
    private func sectionContent(for section: SettingSection) -> some View {
        switch section {
        case .textSize:
            VStack(alignment: .leading, spacing: 10) {
                Text("Bible Verse")
                    .foregroundColor(.white)
                Slider(value: $viewModel.settings.textSize, in: 20...40, step: 1)
                    .accentColor(.white)
                
                Text("Reference")
                    .foregroundColor(.white)
                Slider(value: $viewModel.settings.referenceSize, in: 16...32, step: 1)
                    .accentColor(.white)
            }
            
        case .autoPlay:
           VStack(alignment: .leading, spacing: 10) {
               HStack {
                   Text("\(Int(viewModel.settings.autoPlayInterval))s")
                       .foregroundColor(.white)
                   Spacer()
               }
               Slider(
                   value: $viewModel.settings.autoPlayInterval,
                   in: 1...60,
                   step: 1
               )
               .accentColor(.white)
           }
            
        case .haptic:
            Toggle("Enable Haptic", isOn: $viewModel.settings.hapticEnabled)
                .foregroundColor(.white)
        }
    }
}


// ./DailyManna/Views/CategorySheetView.swift


import SwiftUI

struct CategorySheetView: View {
    @Binding var selectedCategory: SubCategory?
    @ObservedObject var viewModel: QuoteReminderViewModel  // 추가
    @Environment(\.dismiss) var dismiss
    @Environment(\.colorScheme) var colorScheme
    @State private var selectedMainCategory: MainCategory = .faithAndChristianLiving
    
    init(selectedCategory: Binding<SubCategory?>, viewModel: QuoteReminderViewModel) {  // 수정
        _selectedCategory = selectedCategory
        self.viewModel = viewModel
    }
    
    var backgroundColor: Color {
        Color(.systemGray6)  // 항상 다크모드 색상 사용
    }
    
    // 현재 카테고리의 인덱스
    private var currentIndex: Int {
        MainCategory.allCases.firstIndex(of: selectedMainCategory) ?? 0
    }
    
    // 이전 카테고리로 이동 가능 여부
    private var canMoveToPrevious: Bool {
        currentIndex > 0
    }
    
    // 다음 카테고리로 이동 가능 여부
    private var canMoveToNext: Bool {
        currentIndex < MainCategory.allCases.count - 1
    }
    
    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                // 네비게이션 바 커스텀
                HStack {
                    Spacer()
                    Text("Select Category")
                        .font(.system(size: 20, weight: .bold))
                    Spacer()
                    Button("Cancel") {
                        dismiss()
                    }
                    .font(.system(size: 18))
                    .foregroundColor(.blue)
                }
                .padding(.horizontal)
                .padding(.vertical, 16)
                
                // 메인 카테고리 선택 영역
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 16) {
                        ForEach(MainCategory.allCases, id: \.self) { category in
                            MainCategoryButton(
                                title: category.rawValue,
                                isSelected: selectedMainCategory == category,
                                action: { selectedMainCategory = category }
                            )
                        }
                    }
                    .padding(.horizontal)
                }
                .padding(.vertical, 16)
                
                Divider()
                    .padding(.bottom, 8)
                
                // 서브 카테고리 그리드
                ScrollView(showsIndicators: false) {
                    LazyVGrid(columns: [
                        GridItem(.flexible()),
                        GridItem(.flexible())
                    ], spacing: 12) {
                        ForEach(CategoryData.getSubCategories(for: selectedMainCategory), id: \.id) { subCategory in
                            Button(action: {
                                selectedCategory = subCategory
                                Task {
                                    await viewModel.loadQuotesForCategory(subCategory)
                                }
                                dismiss()
                            }) {
                                VStack(spacing: 8) {
                                    Text(subCategory.icon)
                                        .font(.system(size: 32))
                                    Text(subCategory.name)
                                        .font(.system(size: 16, weight: .medium))
                                        .multilineTextAlignment(.center)
                                        .foregroundColor(colorScheme == .dark ? .white : .black)
                                }
                                .frame(maxWidth: .infinity)
                                .padding(.vertical, 16)
                                .background(
                                    RoundedRectangle(cornerRadius: 12)
                                        .fill(selectedCategory?.id == subCategory.id ?
                                             Color.orange.opacity(0.15) :
                                                (colorScheme == .dark ? Color(.systemGray5) : Color(.systemGray6)))
                                        .overlay(
                                            RoundedRectangle(cornerRadius: 12)
                                                .stroke(selectedCategory?.id == subCategory.id ?
                                                       Color.orange : Color.clear,
                                                       lineWidth: 2)
                                        )
                                )
                            }
                        }
                    }
                    .padding(.horizontal, 16)
                }
                
                // 화살표 버튼
                HStack(spacing: 40) {
                    Button(action: {
                        if canMoveToPrevious {
                            withAnimation {
                                selectedMainCategory = MainCategory.allCases[currentIndex - 1]
                            }
                        }
                    }) {
                        Image(systemName: "chevron.left.circle.fill")
                            .font(.system(size: 40))
                            .foregroundColor(canMoveToPrevious ? .orange : .gray.opacity(0.3))
                    }
                    .disabled(!canMoveToPrevious)
                    
                    Button(action: {
                        if canMoveToNext {
                            withAnimation {
                                selectedMainCategory = MainCategory.allCases[currentIndex + 1]
                            }
                        }
                    }) {
                        Image(systemName: "chevron.right.circle.fill")
                            .font(.system(size: 40))
                            .foregroundColor(canMoveToNext ? .orange : .gray.opacity(0.3))
                    }
                    .disabled(!canMoveToNext)
                }
                .padding(.vertical, 20)
            }
            .background(backgroundColor.ignoresSafeArea())
        }
        .navigationBarHidden(true)
    }
}

struct MainCategoryButton: View {
    let title: String
    let isSelected: Bool
    let action: () -> Void
    @Environment(\.colorScheme) var colorScheme
    
    var body: some View {
        Button(action: action) {
            Text(title)
                .font(.system(size: 17, weight: .medium))
                .lineLimit(1)
                .padding(.horizontal, 20)
                .padding(.vertical, 10)
                .background(
                    RoundedRectangle(cornerRadius: 20)
                        .fill(isSelected ? Color.orange : (colorScheme == .dark ? Color(.systemGray5) : Color(.systemGray6)))
                )
                .foregroundColor(isSelected ? .white : .primary)
                .contentShape(Rectangle())
                .fixedSize(horizontal: true, vertical: false)
        }
        .buttonStyle(PlainButtonStyle())
    }
}


// ./DailyManna/Views/ContentView.swift


//

import SwiftUI

// ContentView.swift
struct ContentView: View {
    @StateObject private var viewModel = QuoteReminderViewModel()
    @State private var hasExistingSettings: Bool = false
    
    var body: some View {
        NavigationView {
            if hasExistingSettings {
                QuoteView(viewModel: viewModel)
            } else {
                ReminderSetupView(viewModel: viewModel)
            }
        }
        .onAppear {
            // Check for saved category and load it
            Task {
                let hasSettings = await viewModel.loadSavedCategory()
                hasExistingSettings = hasSettings
            }
        }
    }
}


// ./DailyManna/Views/Components/TimePickerSheet.swift

import SwiftUI

struct TimePickerSheet: View {
    @Binding var selectedTime: Date
    @Environment(\.dismiss) var dismiss
    @Environment(\.colorScheme) var colorScheme
    
    var body: some View {
        NavigationView {
            VStack {
                DatePicker("Select Time",
                          selection: $selectedTime,
                          displayedComponents: .hourAndMinute)
                    .datePickerStyle(WheelDatePickerStyle())
                    .labelsHidden()
                    .frame(maxHeight: 200)
                    .padding()
            }
            .navigationTitle("Select Time")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Done") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        dismiss()
                    }
                }
            }
            .background(colorScheme == .dark ? Color.black : Color.white)
        }
    }
}


// ./DailyManna/Views/Components/DayButton.swift


import SwiftUI

struct DayButton: View {
    let day: String
    let isSelected: Bool
    let action: () -> Void
    @Environment(\.colorScheme) var colorScheme
    
    var body: some View {
        Button(action: action) {
            Text(day)
                .font(.subheadline)
                .fontWeight(.medium)
                .frame(maxWidth: .infinity)
                .padding(.vertical, 12)
                .background(
                    RoundedRectangle(cornerRadius: 12)
                        .fill(isSelected ? Color.orange : (colorScheme == .dark ? Color(.systemGray5) : Color(.systemGray6)))
                )
                .foregroundColor(isSelected ? .white : (colorScheme == .dark ? .white : .black))
        }
    }
}


// ./DailyManna/Views/Components/BibleQuoteCategory.swift

import SwiftUI

// 메인 카테고리
enum MainCategory: String, CaseIterable {
    case faithAndChristianLiving = "Pillars of Faith and Christian Living"
    case personalGrowth = "Personal Growth and Life Balance"
    case relationships = "Relationships and Community"
    case practicalLiving = "Practical Living"
}

// 서브 카테고리
struct SubCategory: Identifiable, Hashable, Codable {
    let id = UUID()
    let name: String
    let topics: [String]
    let icon: String
    
    // Hashable 구현
    func hash(into hasher: inout Hasher) {
        hasher.combine(id)
    }
    
    static func == (lhs: SubCategory, rhs: SubCategory) -> Bool {
        lhs.id == rhs.id
    }
}

// 카테고리 데이터 구조
struct CategoryData {
    static let faithAndChristianLiving: [SubCategory] = [
        SubCategory(name: "Faith", topics: [
            "Strengthening Your Faith",
            "Living by Faith, Not by Sight",
            "Faith in God's Promises"
        ], icon: "✝️"),
        SubCategory(name: "Trust", topics: [
            "Trusting God's Timing",
            "Letting Go of Worry",
            "Confidence in God's Plan"
        ], icon: "🙏"),
        SubCategory(name: "Hope", topics: [
            "Finding Hope in Difficult Times",
            "God's Promises for the Future",
            "Hope in Eternal Life"
        ], icon: "⭐️"),
        SubCategory(name: "Love", topics: [
            "God's Unconditional Love",
            "Loving Your Neighbor",
            "Forgiving with Love"
        ], icon: "❤️"),
        SubCategory(name: "Peace", topics: [
            "Peace in Times of Anxiety",
            "God's Gift of Inner Peace",
            "Living as a Peacemaker"
        ], icon: "🕊️"),
        SubCategory(name: "Joy", topics: [
            "Finding Joy in Trials",
            "Rejoicing in the Lord",
            "Sustaining Joy Through Faith"
        ], icon: "😊"),
        SubCategory(name: "Wisdom", topics: [
            "Seeking Godly Wisdom",
            "Wisdom in Decision-Making",
            "The Fear of the Lord as Wisdom"
        ], icon: "📚"),
        SubCategory(name: "Strength", topics: [
            "God's Strength in Our Weakness",
            "Overcoming Challenges with His Power",
            "Renewing Strength Through Prayer"
        ], icon: "💪"),
        SubCategory(name: "Grace", topics: [
            "Living in God's Grace",
            "Extending Grace to Others",
            "The Gift of Salvation by Grace"
        ], icon: "🌟"),
        SubCategory(name: "Forgiveness", topics: [
            "God's Forgiveness of Sins",
            "Forgiving Those Who Hurt Us",
            "Freedom Through Forgiveness"
        ], icon: "🕊️")
    ]
    
    static let personalGrowth: [SubCategory] = [
        SubCategory(name: "Take Care of Your Health", topics: [
            "Finding Strength in Physical Weakness",
            "Trusting God Through Illness",
            "Caring for Your Body as God's Temple"
        ], icon: "💪"),
        SubCategory(name: "Improve Your Mindset", topics: [
            "Renewing Your Mind with God's Word",
            "Developing a Positive Attitude",
            "Replacing Negative Thoughts with Truth"
        ], icon: "🧠"),
        SubCategory(name: "Look on the Bright Side", topics: [
            "Gratitude in Every Situation",
            "Seeing God's Goodness Around You",
            "Overcoming Complaints with Thankfulness"
        ], icon: "☀️"),
        SubCategory(name: "Stay Mentally Strong", topics: [
            "Battling Stress and Anxiety Through Prayer",
            "Standing Firm in the Storms of Life",
            "Finding Rest in God's Peace"
        ], icon: "🏋️‍♂️")
    ]
    
    static let relationships: [SubCategory] = [
        SubCategory(name: "Build Healthy Relationships", topics: [
            "Strengthening Bonds with Loved Ones",
            "Resolving Conflicts in Love",
            "Supporting Each Other in Faith"
        ], icon: "👥")
    ]
    
    static let practicalLiving: [SubCategory] = [
        SubCategory(name: "Work-Life Balance", topics: [
            "Trusting God in Your Career",
            "Honoring God with Your Time",
            "Resting in the Sabbath Principle"
        ], icon: "⚖️"),
        SubCategory(name: "Financial Wisdom", topics: [
            "Trusting God as Your Provider",
            "Stewarding Resources Wisely",
            "Overcoming Fear of Financial Lack"
        ], icon: "💰")
    ]
    
    static func getSubCategories(for mainCategory: MainCategory) -> [SubCategory] {
        switch mainCategory {
        case .faithAndChristianLiving:
            return faithAndChristianLiving
        case .personalGrowth:
            return personalGrowth
        case .relationships:
            return relationships
        case .practicalLiving:
            return practicalLiving
        }
    }
}


// ./DailyManna/Views/Components/CategoryChip.swift

import SwiftUI

struct CategoryChip: View {
    let category: SubCategory
    @Environment(\.colorScheme) var colorScheme
    
    var body: some View {
        HStack(spacing: 4) {
            Text(category.icon)
            Text(category.name)
                .font(.subheadline)
        }
        .padding(.horizontal, 12)
        .padding(.vertical, 8)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.orange.opacity(colorScheme == .dark ? 0.3 : 0.1))
        )
        .foregroundColor(colorScheme == .dark ? .white : .black)
    }
}


// ./DailyManna/Views/Components/CategoryButton.swift

import SwiftUI

struct CategoryButton: View {
    let category: SubCategory
    let isSelected: Bool
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            VStack {
                Text(category.icon)
                    .font(.system(size: 30))
                Text(category.name)
                    .font(.system(size: 14, weight: .medium))
                    .multilineTextAlignment(.center)
            }
            .frame(maxWidth: .infinity)
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(isSelected ? Color.orange.opacity(0.1) : Color.gray.opacity(0.1))
                    .overlay(
                        RoundedRectangle(cornerRadius: 12)
                            .stroke(isSelected ? Color.orange : Color.clear, lineWidth: 2)
                    )
            )
        }
        .foregroundColor(isSelected ? .orange : .primary)
    }
}


// ./DailyManna/Views/Components/ThemeSelectionSheet.swift

import SwiftUI

struct ThemeSelectionSheet: View {
    @Environment(\.dismiss) var dismiss
    @ObservedObject var viewModel: QuoteReminderViewModel
    @State private var isPremiumLocked = false
    
    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                Text("Themes")
                    .font(.largeTitle)
                    .bold()
                
                // Theme Preview
                ZStack {
                    viewModel.settings.theme.color
                        .frame(width: 300, height: 400)
                        .cornerRadius(20)
                    
                    Text("Sample Text")
                        .foregroundColor(.white)
                        .font(.system(size: 24))
                }
                
                // Theme Options
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 20) {
                        ForEach(QuoteTheme.allCases, id: \.self) { theme in
                            VStack {
                                theme.color
                                    .frame(width: 100, height: 150)
                                    .cornerRadius(10)
                                    .overlay(
                                        theme == viewModel.settings.theme ?
                                        RoundedRectangle(cornerRadius: 10)
                                            .stroke(Color.white, lineWidth: 2) : nil
                                    )
                                
                                if theme != .classic && theme != .midnight {
                                    Image(systemName: "crown.fill")
                                        .foregroundColor(.yellow)
                                }
                            }
                            .onTapGesture {
                                if theme == .classic || theme == .midnight {
                                    viewModel.settings.theme = theme
                                } else {
                                    isPremiumLocked = true
                                }
                            }
                        }
                    }
                    .padding()
                }
            }
            .navigationBarItems(trailing: Button("Done") { dismiss() })
        }
        .alert("Premium Feature", isPresented: $isPremiumLocked) {
            Button("Get Premium") {
                // Premium 구매 로직
            }
            Button("Cancel", role: .cancel) {}
        } message: {
            Text("Unlock all themes with Premium!")
        }
    }
}


// ./DailyManna/Views/Components/QuoteSettings.swift

import SwiftUI

// QuoteSettings.swift
struct QuoteSettings: Codable {
    var textSize: Double = 28
    var referenceSize: Double = 24
    var autoPlayInterval: Double = 12.0
    var hapticEnabled: Bool = true
    var theme: QuoteTheme = .classic
}

enum QuoteTheme: String, Codable, CaseIterable {
    case classic = "Classic"
    case midnight = "Midnight"
    // Premium themes
    case ocean = "Ocean"
    case forest = "Forest"
    case sunset = "Sunset"
}


